name: Run Django Tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
    
    - name: Copy .env file
      working-directory: ./backend
      run: |
        cp .env.example .env # If you have a .env.example file, or set the variables here manually.
    
    - name: Build and Start Services
      working-directory: ./backend
      env:
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_HOST: postgres
        POSTGRES_PORT: 5432
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DEBUG: False
      run: |
        docker-compose up -d --build
    
    - name: Wait for Database to be ready
      working-directory: ./backend
      run: |
        until docker-compose exec postgres pg_isready --timeout=0 --dbname=${{ secrets.POSTGRES_DB }}; do
          echo "Waiting for database connection..."
          sleep 5
        done
    
    - name: Run Migrations
      working-directory: ./backend
      run: |
        docker-compose exec be poetry run python manage.py migrate
    
    - name: Run Tests
      working-directory: ./backend
      run: |
        docker-compose exec be poetry run python manage.py test
    
    - name: Stop Services
      if: always()
      working-directory: ./backend
      run: |
        docker-compose down
